<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Firefox Splinter on Jim Kalafut</title>
    <link>http://kalafut.net/categories/firefox-splinter/</link>
    <description>Recent content in Firefox Splinter on Jim Kalafut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Jan 2014 10:09:26 -0800</lastBuildDate>
    <atom:link href="http://kalafut.net/categories/firefox-splinter/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Determine a unique selector with Firefox</title>
      <link>http://kalafut.net/post/2014-01-01-determine-a-using-html-node-with-firefox/</link>
      <pubDate>Wed, 01 Jan 2014 10:09:26 -0800</pubDate>
      
      <guid>http://kalafut.net/post/2014-01-01-determine-a-using-html-node-with-firefox/</guid>
      <description>&lt;p&gt;I use &lt;a href=&#34;http://splinter.cobrateam.info/&#34;&gt;splinter&lt;/a&gt; to automate downloading information from banks and
brokerages. It works well. Those sites are usual horribly designed, outdated, and a royal pain to navigate.
Suffering through the one-time process of developing a script to automated dealing with them is well worth it.&lt;/p&gt;

&lt;p&gt;Usually the script development is simply done by inspecting DOM element ids or names. But some of these bank
sites are so bad, you&amp;rsquo;re left with trying to send a click event to an image buried in a table with little in
the way of navigation helpers. In this case, Firefox&amp;rsquo;s &lt;strong&gt;Copy Unique Selector&lt;/strong&gt; works well.  Just inspect the
element and access the function via the dropdown:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kalafut.net/firefox_selector.png&#34; alt=&#34;Firefox Selector&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This will give you something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.bg8 &amp;gt; td:nth-child(3) &amp;gt; table:nth-child(1) &amp;gt; tbody:nth-child(1) &amp;gt; tr:nth-child(11) &amp;gt; td:nth-child(2) &amp;gt; input:nth-child(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this I can use &lt;a href=&#34;http://splinter.cobrateam.info/docs/api/driver-and-element-api.html#splinter.driver.DriverAPI.find_by_css&#34;&gt;browser.find_by_css()&lt;/a&gt; to access the element.&lt;/p&gt;

&lt;p&gt;Super ugly, yes, but when the source you&amp;rsquo;re working with is ancient and has virtually no identifiers to hook
into, it may be the simplest approach.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>