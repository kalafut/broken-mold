<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ansible Fabric Deployment on Jim Kalafut</title>
    <link>http://kalafut.net/categories/ansible-fabric-deployment/</link>
    <description>Recent content in Ansible Fabric Deployment on Jim Kalafut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Jan 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://kalafut.net/categories/ansible-fabric-deployment/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>On Ansible and Fabric</title>
      <link>http://kalafut.net/post/2014-01-20-on-ansible-and-fabric/</link>
      <pubDate>Mon, 20 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://kalafut.net/post/2014-01-20-on-ansible-and-fabric/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s very easy for me to become paralyzed by the pursuit of a &amp;ldquo;best practice&amp;rdquo;. In some cases there
isn&amp;rsquo;t much risk. Coding conventions, for example. When the world has decided that &lt;code&gt;===&lt;/code&gt; is better than
&lt;code&gt;==&lt;/code&gt; most of the time in Javascript, I&amp;rsquo;m happy to go along with it. But other areas are trickier. I
can easily get really caught up in web framework and database choices. Another area is deployment,
but I&amp;rsquo;ve recently had an epiphany that I&amp;rsquo;ll decribe.&lt;/p&gt;

&lt;p&gt;I recall seeing a talk at DjangoCon about deployment with Chef and one bit that stuck in my mind was
how he portrayed configuration management systems (&lt;a href=&#34;http://www.getchef.com/chef/&#34;&gt;Chef&lt;/a&gt;,
&lt;a href=&#34;http://puppetlabs.com/&#34;&gt;Puppet&lt;/a&gt;, &lt;a href=&#34;http://www.ansibleworks.com/&#34;&gt;Ansible&lt;/a&gt;, etc.) as pretty much &lt;em&gt;the&lt;/em&gt;
way to responsibly provision and deploy. To do anything less was reckless, and he called out
&lt;a href=&#34;http://fabfile.org&#34;&gt;Fabric&lt;/a&gt; as a utility that one should remove from the tool box.&lt;/p&gt;

&lt;p&gt;I think he&amp;rsquo;s right and wrong, and it depends largely on the circumstance. Here&amp;rsquo;s how I see deployments
scenarios in increasing sophistication:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;No structure, no repeatability. Just SSH into a box and do whatever. Get files there however.&lt;/li&gt;
&lt;li&gt;Organized chaos. Maybe some helper scripts to make certain aspects repeatable. Still a lot of
work done right on the remote.&lt;/li&gt;
&lt;li&gt;Remote control. Using a tool like Fabric to script repeatable interactions with the remote box.
This means much less random stuff being done in a remote shell, and those things that are happening
are part of source control (e.g. fabfile.py)&lt;/li&gt;
&lt;li&gt;Automation. Enter the likes of Puppet, Chef, Salt Stack, Ansible. Sophisticated, turn-key provisioning
and deployment across lots of machines.&lt;/li&gt;
&lt;li&gt;???  More complicated than I&amp;rsquo;ll ever deal with.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After the DjangoCon talk I was compelled to try to play at level 3 exclusively. It partially
worked. After trying a number of solutions I settled on Ansible for VPS provisioning and without
a doubt saw real benefits. For me, things like setting up a new VPS are doable but time consuming
and error prone. Ansible is designed for this sort of task, and there are plenty of playbooks
available to get a new VPS instance most of the way there, which I&amp;rsquo;ve then modified to suit my tasks. Once things are
working well, there isn&amp;rsquo;t much need to regularly touch those playbooks.&lt;/p&gt;

&lt;p&gt;But application deployment on Ansible has been trickier. I&amp;rsquo;ve read quite a bit about why I can and should
be using Ansible for that portion as well, but I find that setting up that solution is way clunkier
than my simple Fabric scripts, and I don&amp;rsquo;t see the benefit for me. I&amp;rsquo;m a one-man band pushing up very
small projects. For me the enemies are time and complexity, not issues of scale and dealing with
many developers. A simple Fabric script is easier to understand and runs fast. My attempts at
Ansible-based approaches were a pain to develop and test, and ultimately ran slower.&lt;/p&gt;

&lt;p&gt;I think the litmus test for tasks in my projects will be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if it relates to instance configuration and is not strongly tied to any app, use &lt;strong&gt;Ansible&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;if it relates to deploying, configuring and controlling an app, use &lt;strong&gt;Fabric&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>